name: Build and Push Image to Github Container Registry

on:
  [workflow_dispatch]
  # pull_request:
  #   branches: [ "staging" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gilliozdreamlabs

jobs:

  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}-dev
          type=sha
          type=raw,value=latest
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Gillioz DreamLabs Web App
          org.opencontainers.image.version={{version}}

    - name: Debug environment variables
      run: |
        echo "REGISTRY: ${{ env.REGISTRY }}"
        echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
        echo "Resolved tags: ${{ steps.meta.outputs.tags }}"
        - name: Pull existing image metadata from GHCR (if any)

    - name: Pull existing image metadata from GHCR (if any)
      id: pull-metadata
      run: |
        # Attempt to pull the latest image (if it exists)
        IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
        docker pull $IMAGE || echo "No existing image found"

        # Extract the version from the image metadata
        VERSION=$(docker inspect --format '{{ index .RepoTags 0 }}' $IMAGE || echo "v0.0.0")
        echo "Existing image version: $VERSION"
        
        # Extract the version number (assuming semantic versioning format v1.0.0)
        VERSION_NUMBER=$(echo $VERSION | sed 's/v//')
        echo "Version number extracted: $VERSION_NUMBER"

        # Increment the version
        VERSION_INCREMENTED=$(echo $VERSION_NUMBER | awk -F. -v OFS=. '{$NF++;print}')
        echo "Incremented version: v$VERSION_INCREMENTED"

        # Set the incremented version as an environment variable
        echo "VERSION=v$VERSION_INCREMENTED" >> $GITHUB_ENV
